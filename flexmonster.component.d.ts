import { ElementRef, EventEmitter } from '@angular/core';
import * as Flexmonster from 'flexmonster';
export declare class FlexmonsterPivot {
    toolbar: boolean;
    licenseKey: string;
    width: string | number;
    height: string | number;
    componentFolder: string;
    report: Flexmonster.Report | string;
    global: Flexmonster.Report;
    customizeAPIRequest: (request: Object) => Object;
    customizeCell: (cell: Flexmonster.CellBuilder, data: Flexmonster.CellData) => void;
    customizeContextMenu: (cell: Flexmonster.ContextMenuItem[], data: Flexmonster.CellData | Flexmonster.ChartData, viewType: string) => Flexmonster.ContextMenuItem[];
    cellclick: EventEmitter<Flexmonster.CellData>;
    celldoubleclick: EventEmitter<Flexmonster.CellData>;
    chartclick: EventEmitter<Flexmonster.ChartData>;
    dataerror: EventEmitter<Object>;
    datafilecancelled: EventEmitter<Object>;
    dataloaded: EventEmitter<Object>;
    datachanged: EventEmitter<Object>;
    fieldslistclose: EventEmitter<Object>;
    fieldslistopen: EventEmitter<Object>;
    filterclose: EventEmitter<Object>;
    filteropen: EventEmitter<Object>;
    drillthroughopen: EventEmitter<Flexmonster.CellData | Flexmonster.ChartData>;
    drillthroughclose: EventEmitter<Object>;
    fullscreen: EventEmitter<Object>;
    loadingdata: EventEmitter<Object>;
    loadinglocalization: EventEmitter<Object>;
    loadingolapstructure: EventEmitter<Object>;
    loadingreportfile: EventEmitter<Object>;
    localizationerror: EventEmitter<Object>;
    localizationloaded: EventEmitter<Object>;
    olapstructureerror: EventEmitter<Object>;
    olapstructureloaded: EventEmitter<Object>;
    openingreportfile: EventEmitter<Object>;
    querycomplete: EventEmitter<Object>;
    queryerror: EventEmitter<Object>;
    ready: EventEmitter<Flexmonster.Pivot>;
    reportchange: EventEmitter<Object>;
    reportcomplete: EventEmitter<Object>;
    reportfilecancelled: EventEmitter<Object>;
    reportfileerror: EventEmitter<Object>;
    reportfileloaded: EventEmitter<Object>;
    runningquery: EventEmitter<Object>;
    update: EventEmitter<Object>;
    beforetoolbarcreated: EventEmitter<Object>;
    beforegriddraw: EventEmitter<Object>;
    aftergriddraw: EventEmitter<Object>;
    afterchartdraw: EventEmitter<Object>;
    flexmonster: Flexmonster.Pivot;
    private root;
    constructor(el: ElementRef);
    ngOnInit(): void;
}
